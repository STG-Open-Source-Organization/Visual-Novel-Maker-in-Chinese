<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 2015" />
<title>Example: Styles</title>
<link rel="StyleSheet" href="default.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="template/scripts/rh.min.js"></script>
<script type="text/javascript" src="template/scripts/common.min.js"></script>
<script type="text/javascript" src="template/scripts/topic.min.js"></script>
<script type="text/javascript" src="template/scripts/constants.js"></script>
<script type="text/javascript" src="template/scripts/utils.js"></script>
<script type="text/javascript" src="template/scripts/mhutils.js"></script>
<script type="text/javascript" src="template/scripts/mhlang.js"></script>
<script type="text/javascript" src="template/scripts/mhver.js"></script>
<script type="text/javascript" src="template/scripts/settings.js"></script>
<script type="text/javascript" src="template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = ".";
gCommonRootRelPath = ".";
gTopicId = "5.3.1.0_2";
</script>
 <meta name="topic-breadcrumbs" content="Script and Plugin Reference > In-Game UI Documentation > Getting Started" />
</head>
<body>
<script type="text/javascript" src="./ehlpdhtm.js"></script>

<div style="width: 100%; position: relative;" id="header">
 <p class="Topic_Heading"><span>示例：样式</span></p>
</div>
<p>&#160;</p>
<p>
	<span class="Topic_Start"></span>
	如果您查看第一个示例中的自定义标题屏幕,您将看到我们的按钮定义有一些冗余数据，例如底部边距为10像素，并且它们的大小都可以调整。在我们的示例中它工作的很好，但在更复杂的场景中，这将成为一个巨大的问题，例如使用15像素的边距而不是10像素的边距。因此那时我们必须检查并更改我们所有的控件。这就是样式（styles）可以帮助你的地方！
	you will see that our button   have some redundant data like a bottom-margin of 10 pixel and they are all resizable. It is fine in our example, but in more complex scenarios this becomes a huge problem if we decide later to make a change like using 15 pixel margin instead of 10. Because then we have to go through all of our controls and change it.
</p>
<p>&#160;</p>
<p class="Sub_Heading"><span>样式（style）定义</span></p>
<p>
	style允许您一次定义一组特性，然后将其重新用于任意数量的控件或布局。如果要定义新样式（style），可以在每个脚本中定义，甚至可以创建一个新脚本。所有默认样式都位于“Style”文件夹中的“Style_Default"脚本。示例样式如下所示：
</p>
<p>&#160;</p>
<p><span class="Code">ui.UIManager.styles.titleScreenButton = {</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;"resizable": true,</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;"margin": [0, 0, 0, 10]</span></p>
<p><span class="Code">}</span></p>
<p>&#160;</p>
<p>
	我们把它放在“Style_Default”脚本的末尾。第一行的格式始终相同：
</p>
<p>&#160;</p>
<p><span class="Code">ui.UIManager.styles.&lt;style_name&gt; = {</span></p>
<p>&#160;</p>
<p>
	没有必要完全理解这一行，重要的是您必须为您的样式（style）定义一个唯一的名称。名称不应包含任何空格或特殊字符。
</p>
<p>&#160;</p>
<p>
	定义样式(style)后，我们可以更改标题屏幕示例，如下所示：
</p>
<p>&#160;</p>
<p><span class="Code">ui.UIManager.layouts.titleLayout = {</span></p>
<p><span class="Code">&#160;&#160;"type": "ui.FreeLayout",</span></p>
<p><span class="Code">&#160;&#160;"frame": [0, 0, Graphics.width, Graphics.height],</span></p>
<p><span class="Code">&#160;&#160;"controls": [</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;{</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"type": "ui.Image",</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"image": "bg-generic",</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"frame": [0, 0, "100%", "100%"]</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;},</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;{</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"type": "ui.StackLayout",</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"orientation": "vertical",</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"frame": ["35%", "60%", "30%", "30%"]</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"controls": [</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"type": "ui.Button",</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"params": { "text": "New Game", "action": { "name": "newGame" } },</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"style": "titleScreenButton"</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;},</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"type": "ui.Button",</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"params": { "text": "Load Game", "action": { "name": "switchLayout", "params": { "name": "loadMenuLayout", "savePrevious": true } } },</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"style": "titleScreenButton"</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;},</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"type": "ui.Button",</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"params": { "text": "Quit", "action": { "name": "quitGame" } },</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"style": "titleScreenButton"</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;]</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;&#160;&#160;}</span></p>
<p><span class="Code">&#160;&#160;]</span></p>
<p><span class="Code">}</span></p>
<p>&#160;</p>
<p>
	您甚至可以在一个物件（item）上应用多种样式，如下所示：
</p>
<p>&#160;</p>
<p><span class="Code">"styles": ["titleScreenButton", "otherStyle"]</span></p>
<p>&#160;</p>
<p>
	在这种情况下，样式(style)将一个接一个地应用。如果存在冲突属性，如两个样式(style)包含相同的属性，则最后应用的样式(style)获胜。
</p>
<p>&#160;</p>
<p class="Sub_Heading"><span>Events</span></p>
<p>It is also possible to change the style of a control at runtime if a certain event takes place. For Example: If we hover a control's area with the mouse pointer, another style can be applied to give some visual feedback to the use like changing the control's color.</p>
<p>&#160;</p>
<p>To bind a style to an event, you first need to define the base style used as long as no special event takes place:</p>
<p>&#160;</p>
<p><span class="Code">ui.UIManager.styles.hyperlink = {</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;"font": { "color": [255, 255, 255], "size": 30 }</span></p>
<p><span class="Code">}</span></p>
<p>&#160;</p>
<p>In .this example, we want to make a style which can be used to make hyperlinks. So if we hover over it the text color will change.</p>
<p>&#160;</p>
<p><span class="Code">ui.UIManager.styles["hyperlink:hover"] = {</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;"font": { "color": [255, 0, 0], "size": 30 }</span></p>
<p><span class="Code">}</span></p>
<p>&#160;</p>
<p>To bind a style to an event, we use the syntax:</p>
<p>&#160;</p>
<p><span class="Code">:&lt;event&gt;</span></p>
<p>&#160;</p>
<p>The following events are available:</p>
<p>&#160;</p>
<ul style="list-style: disc;">
<li>hover - Applies the style if the control's area is hovered with mouse pointer.</li>
<li>selected - Applies the style if the control is selected.</li>
</ul>
<p>&#160;</p>
<p>In our example, we used the "hover" event so our styles is applied on mouse-hover to each control with the base "hyperlink" style set. So if we create text like this now:</p>
<p>&#160;</p>
<p><span class="Code">{</span></p>
<p><span class="Code">&#160;&#160;&#160;&#160;"type": "ui.Text",</span></p>
<p style="margin-left: 40px;"><span class="Code">"style": "hyperlink",</span></p>
<p style="margin-left: 40px;"><span class="Code">"text": "Hover Me",</span></p>
<p style="margin-left: 40px;"><span class="Code">"frame": [0, 0],</span></p>
<p style="margin-left: 40px;"><span class="Code">"sizeToFit": true</span></p>
<p><span class="Code">}</span></p>
<p>&#160;</p>
<p>It will change its color on hover!</p>
</body>
</html>
